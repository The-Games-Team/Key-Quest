let player;
let btns = [];
let sliders = [];
let mode = "medium";
let lives = 5;
let menu = false;
let levelselect = false;
let settings = false;
let platforms = [];
let spikes = [];
let enemies = [];
let friends = [];
let key_; // can't be key cuz that's a built in var
let door;
let images = {};
let sounds = {};
let toLoad = ["background", "background2", "wooden_plate", "playbtn", "pausebtn", "resumebtn", "x", "button", "buttonwide", "home", "bar", "handle", "settings", "levelselectbtn", "padlock", "walkplayer1", "walkplayer2", "walkplayer3", "walkplayer4", "walkplayerkey1", "walkplayerkey2", "walkplayerkey3", "walkplayerkey4", "idleplayer1", "idleplayer2", "idleplayerkey1", "idleplayerkey2", "grass1", "grass2", "grass3", "grass4", "grass5", "grass6", "grass7", "grass8", "grass9", "grass10", "spiky", "key", "door", "enemy", "weakenemy", "friend", "heart", "emptyheart"];
let toLoadSounds = ["jump", "death", "key", "lvlcomplete", "BOING", "buttonclick", "gameover"];
let camX, camY;
let currentLevel = 0;
let youWin = false;
let hasHealth = false;
let timer;
let paused = false;
let pausedTime = 0;
let now;
let start;
let result;
let deaths = 0;
let pxfont;
let music;
let levels = 25;
let particles = [];
let bubbles = [];
let musicVolume = 0.5, soundVolume = 1, soundVariance = 0.2;
let highestUnlockedEasy = 0;
let highestUnlockedMedium = 0;
let highestUnlockedHard = 0;
let storage;

// 1.   check if cieling above and allow jump
// 2. 
// 3. 
// 4. 
// 5. 
// 6. 

// | difficulty | short | medium | long | longest  |  lives   |
// | easy       | 30    | 60     | 120  | INFINITE | INFINITE |
// | medium     | 20    | 30     | 60   | 120      | INFINITE |
// | hard       | 15    | 20     | 30   | 60       | 5        |
//

// function preload() {
//   sprite = loadImage("./assets/player.png");
//   grass1 = loadImage('./assets/grass1.png');
//   grass2 = loadImage('./assets/grass2.png');
//   grass3 = loadImage('./assets/grass3.png');
//   grass4 = loadImage('./assets/grass4.png');
//   grass5 = loadImage('./assets/grass5.png');
//   grass6 = loadImage('./assets/grass6.png');
//   grass7 = loadImage('./assets/grass7.png');
//   grass8 = loadImage('./assets/grass8.png');
//   grass9 = loadImage('./assets/grass9.png');
//   grass10 = loadImage('./assets/grass10.png');
// }

function setup() {
  createCanvas(windowWidth, windowHeight);

  storage = window.localStorage;
  if (!storage.getItem("storageSet")) {
    initStorage();
  }
  highestUnlockedEasy = parseInt(storage.getItem("highestUnlockedEasy"));
  highestUnlockedMedium = parseInt(storage.getItem("highestUnlockedMedium"));
  highestUnlockedHard = parseInt(storage.getItem("highestUnlockedHard"));

  camX = width / 2;
  camY = height / 2;
  noCursor();

  loadImages();
  setInterval(update, 1000/60 /* 60fps */);

  noSmooth();
}

function initStorage() {
  storage.setItem("storageSet", true);
  storage.setItem("highestUnlockedEasy", 0);
  storage.setItem("highestUnlockedMedium", 0);
  storage.setItem("highestUnlockedHard", 0);
}

function playSound(name) {
  sounds[name].amp(soundVolume);
  sounds[name].rate(random(1 - soundVariance, 1 + soundVariance));
  sounds[name].play();
}

function loseLife() {
  if (mode === "hard") {
    lives--;
    if (lives <= 0) {
      currentLevel = 0;
      loadLevel(0);
      lives = 5;
      playSound("gameover");
    }
  }
}

function loadMenu() {
  btns.splice(0);
  sliders.splice(0);
  btns.push(new Button(width / 2, height / 2 - 108, 216, 108, images.playbtn, () => {
    menu = false;
    if (mode === "speedrun") {
      currentLevel = 0;
    }
    loadLevel(currentLevel);
  }));
  if (mode !== "speedrun") {
    btns.push(new Button(width / 2, height / 2 + 9, 216, 108, images.levelselectbtn, () => {
      levelselect = true;
      loadLevelselect();
    }));
  }
  btns.push(new Button(width / 2, height / 2 + 108, 72, 72, images.settings, () => {
    console.log("settings lol");
    settings = true;
    loadSettings();
  }));
}

function loadLevelselect() {
  btns.splice(0);
  const highestUnlocked = mode === "easy" ? highestUnlockedEasy : (mode === "medium" ? highestUnlockedMedium : highestUnlockedHard);
  let level = 0;
  let sz = 108;
  for (let j = 0; j < 5; j++) {
    for (let i = 0; i < 5; i++) {
      const lvl = level;
      const name = lvl <= highestUnlocked ? lvl+1 : "$padlock" /*yes this is the way i am doing this pls don't judge me*/; 
      btns.push(new Button(width/2 - 2*sz + i*sz, height/2 - 2*sz + j*sz, 72, 72, images.button, name, () => {
        if (lvl <= highestUnlocked) {
          menu = false;
          levelselect = false;
          currentLevel = lvl;
          loadLevel(lvl);
        }
      }));
      level++;
    }
  }
  btns.push(new Button(108, height-108, 72, 72, images.home, () => {
    levelselect = false;
    loadMenu();
  }));
}

function loadSettings() {
  btns.splice(0);
  btns.push(new Button(width / 2, height / 2 - 108, 216, 108, images.buttonwide, mode, () => {
    if (mode === "easy") {
      mode = "medium";
    } else if (mode === "medium") {
      mode = "hard";
    } else if (mode === "hard") {
      mode = "speedrun";
    } else if (mode === "speedrun") {
      mode = "easy";
    }
    btns[0].name = mode;
  }));
  sliders.push(new Slider(width / 2, height / 2 + 108, 0, 1, musicVolume, 0.01, "Music Volume", value => {
    musicVolume = value;
    music.amp(musicVolume);
  }));
  sliders.push(new Slider(width / 2, height / 2 + 180, 0, 1, soundVolume, 0.01, "Sound Volume", value => {
    soundVolume = value;
  }));
  sliders.push(new Slider(width / 2, height / 2 + 252, 0, 0.4, soundVariance, 0.01, "Sound Variance", value => {
    soundVariance = value;
  }));
  btns.push(new Button(108, height-108, 72, 72, images.home, () => {
    settings = false;
    loadMenu();
  }));
}

function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
}

function mousePressed() {
  for (let i = 0; i < 20; i++) {
    bubbles.push(new Bubble(mouseX, mouseY));
  }
  if (menu) {
    for (let i = btns.length - 1; i >= 0; i--) {
      const btn = btns[i];
      if (btn.contains(mouseX, mouseY)) {
        btn.action();
      }
    }
    for (let slider of sliders) {
      slider.click(mouseX, mouseY);
    }
  } else if (mode !== "speedrun" && mouseX > width-90 && mouseX < width-18 && mouseY > 18 && mouseY < 90) {
    if (paused) {
      paused = false;
      now = pausedTime * 1000 - (timer*1000 - (millis() - now)) + now;
    } else {
      paused = true;
      pausedTime = timer - (millis() - now) / 1000;
    }
  } else if (mode !== "speedrun" && paused === true && mouseX > width-180 && mouseX < width-108 && mouseY > 18 && mouseY < 90) {
    menu = true;
    paused = false;
    loadMenu();
  } else if (mode === "speedrun" && mouseX > width-90 && mouseX < width-18 && mouseY > 18 && mouseY < 90) {
    menu = true;
    deaths = 0;
    loadMenu();
  }
}

function mouseDragged() {
  if (menu) {
    for (let slider of sliders) {
      slider.slide(mouseX, mouseY);
    }
  }
}

function mouseReleased() {
  if (menu) {
    for (let slider of sliders) {
      slider.release();
    }
  }
}

function buildLevel(level) {
  // Function will take a 2D array containing the level
  // And make the level
  player = new Player(width / 6, height / 2);
  platforms.splice(0);
  spikes.splice(0);
  key_ = null;
  door = null;
  enemies.splice(0);
  friends.splice(0);
  particles.splice(0);
  now = millis();
  for (let j = 0; j < level.length; j++) {
    for (let i = 0; i < level[0].length; i++) {
      if (level[j][i] === 1) {
        platforms.push(new Platform(i * 72 + width / 6, (j - level.length + 1) * 72 + height - 108, i, j));
      } else if (level[j][i] === 2) {
        spikes.push(new Spike(i * 72 + width / 6, (j - level.length + 1) * 72 + height - 108 + 18));
      } else if (level[j][i] === 3) {
        key_ = new Key(i * 72 + width / 6, (j - level.length + 1) * 72 + height - 108);
      } else if (level[j][i] === 4) {
        door = new Door(i * 72 + width / 6, (j - level.length + 1) * 72 + height - 108);
      } else if (level[j][i] === 5) {
        enemies.push(new Enemy(i * 72 + width / 6, (j - level.length + 1) * 72 + height - 108, false, false));
      } else if (level[j][i] === 6) {
        enemies.push(new Enemy(i * 72 + width / 6, (j - level.length + 1) * 72 + height - 108, true, false));
      } else if (level[j][i] instanceof Array && level[j][i][0] === 1) {
        let platform = new Platform(i * 72 + width / 6, (j - level.length + 1) * 72 + height - 108, i, j);
        platform.waypoints = level[j][i].slice(1).map(({ x, y }) => createVector(x * 72 + width / 6, (y - level.length + 1) * 72 + height - 108));
        platforms.push(platform);
      } else if (level[j][i] === 7) {
        enemies.push(new Enemy(i * 72 + width / 6, (j - level.length + 1) * 72 + height - 108, false, true));
      } else if (level[j][i] === 8) {
        enemies.push(new Enemy(i * 72 + width / 6, (j - level.length + 1) * 72 + height - 108, true, true));
      } else if (level[j][i] === 9) {
        friends.push(new Friend(i * 72 + width / 6, (j - level.length + 1) * 72 + height - 108));
      }
    }
  }
}

function getShortTimer() {
  if (mode === "easy")   return 30;
  if (mode === "medium") return 20;
  if (mode === "hard")   return 20;
  return Infinity;
}
function getMediumTimer() {
  if (mode === "easy")   return 60;
  if (mode === "medium") return 30;
  if (mode === "hard")   return 30;
  return Infinity;
}
function getLongTimer() {
  if (mode === "easy")   return 120;
  if (mode === "medium") return 60;
  if (mode === "hard")   return 60;
  return Infinity;  
}
function getLongestTimer() {
  if (mode === "easy")   return Infinity;
  if (mode === "medium") return 120;
  if (mode === "hard")   return 120;
  return Infinity;
}

function loadLevel(level) {
  console.log(level);
  if (level === 0) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ]);
    timer = getShortTimer();
    start = now;
  } else if (level === 1) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3, 0, 0, 4],
      [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1]
    ]);
  } else if (level === 2) {
    buildLevel([
      [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 4],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1]
    ]);
  } else if (level === 3) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 4],
      [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1]
    ]);
  } else if (level === 4) {
    buildLevel([
      [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0, 4],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1]
    ]);
  } else if (level === 5) {
    buildLevel([
      [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
      [0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 6, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, 4],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ]);
    timer = getMediumTimer();
  } else if (level === 6) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]);
    hasHealth = false;
    timer = getShortTimer();
  } else if (level === 7) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, [1, createVector(3, 3), createVector(10, 3)], [1, createVector(4, 3), createVector(11, 3)], 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ]);
    hasHealth = false;
  } else if (level === 8) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, [1, createVector(12, 0), createVector(21, 0)], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4],
      [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1]
    ]);
    hasHealth = false;
  } else if (level === 9) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, [1, createVector(15, 2), createVector(19, 2)], [1, createVector(16, 2), createVector(20, 2)], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 9, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 2, 2],
      [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1]
    ]);
    hasHealth = false;
    timer = getMediumTimer();
  } else if (level === 10) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1], // wait I alrealdy made the timer 20 for the longer levels
      [0, 0, 0, 0, 2, 1, 1, 2, 0, 0, 0, 0, 1],
      [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 4, 1],
      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, [1, createVector(2, 7), createVector(7, 7)], 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [9, 0, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 1],
      [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 1, 0, 5, 0, 1, 0, 1, 0, 0, 9, 1],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ]);
    timer = getMediumTimer();
    hasHealth = false;
  } else if (level === 11) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [1, createVector(18, 3), createVector(22, 3)], [1, createVector(19, 3), createVector(23, 3)], 0, 0, 0, 0, 0, 0, 0, 0, 0, [1, createVector(29, 3), createVector(25, 3)], [1, createVector(30, 3), createVector(26, 3)], 0, 0, 0, 0],
      [0, 0, 2, 2, 0, 0, 1, 0, 0, 2, 2, 0, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]
    ]);
    
    hasHealth = false;
  } else if (level === 12) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1],
      [0, 1, 1, 1, 1, [1, createVector(5, 2), createVector(5, 13)], 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [9, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 0, 1],
      [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 9, 1],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ]);
  } else if (level === 13) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1],
      [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
      [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, [1, createVector(8, 13), createVector(3, 13), createVector(3, 18)], 0, 0, 9, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
    ]);
  } else if (level === 14) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 9, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 9, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ]);
  } else if (level === 15) {
    buildLevel([
      [0, 0, 0, 0, 0, [1, createVector(5, 0), createVector(10, 0), createVector(10, 5), createVector(5, 5)], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [1, createVector(27, 0), createVector(32, 0), createVector(32, 5), createVector(27, 5)], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 9, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 4, 0, 1],
      [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, [1, createVector(10, 5), createVector(5, 5), createVector(5, 0), createVector(10, 0)], 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, [1, createVector(32, 5), createVector(27, 5), createVector(27, 0), createVector(32, 0)], 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]
    ]);
  } else if (level === 16) {
    buildLevel([
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [1, createVector(15, 2), createVector(18, 5)], 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 6, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]
    ]);
  } else if (level === 17) {
    buildLevel([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,2,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,3,0,9,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,9,0,0,6,0,0,6,0,0,6,0,0,0,0,0,4],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]);
    timer = getLongTimer();
  } else if (level === 18) {
    buildLevel([[0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,0,9,0,2,2,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,9,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,9,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,1,0,9,2,2,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,5,0,0,9,1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,2,0,0,0,0,2,0,0,0,0],[0,0,0,9,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,9,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],[0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,5,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,6,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,1,0,5,0,0,9,0,0,1,0,0,0,0,0,0,2,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,[1,{"x":38,"y":11},{"x":40,"y":14}],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,{"x":20,"y":12},{"x":20,"y":22}],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,5,0,0,0,1,0,0,0,2,0,0,0,2,2,0,9,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,{"x":21,"y":22},{"x":21,"y":27}],1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,[1,{"x":45,"y":27},{"x":63,"y":27}],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,[1,{"x":67,"y":27},{"x":67,"y":4}]],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,[1,{"x":25,"y":29},{"x":32,"y":29}],0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])
    timer = getLongestTimer();
  } else if (level === 19) {
    buildLevel([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,9,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0],[0,2,0,0,0,9,0,0,0,6,0,0,0,0,2,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,2,0,0,0,3,9,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]])
    timer = getLongTimer();
  } else if (level === 20) {
    buildLevel([[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,4,1],[0,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,2,0,0,0,2,0,0,0,0,0,0,1],[0,1,1,0,0,1,1,0,0,1,1,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[[1,{"x":0,"y":7},{"x":0,"y":2}],0,0,0,9,0,0,0,9,0,0,0,1],[1,1,1,1,1,1,1,1,1,1,1,[1,{"x":11,"y":8},{"x":11,"y":13}],1],[0,0,2,0,0,2,0,0,2,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,9,0,0,0,0,0,0,0,0,0,0,1],[0,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,3,0,0,0,0,0,0,1],[0,0,2,0,0,2,0,0,2,0,0,0,1],[0,1,1,1,1,1,1,1,1,1,0,0,1],[[1,{"x":0,"y":19},{"x":0,"y":14}],0,0,0,0,0,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1,1,1,1,[1,{"x":11,"y":20},{"x":11,"y":25}],1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,1,0,0,0,0,0,1,0,0,0,0,1],[0,0,0,0,6,0,0,0,0,0,6,0,1],[0,6,0,0,0,0,0,6,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,1,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,6,0,0,6,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[[1,{"x":0,"y":31},{"x":0,"y":26}],0,1,0,0,0,0,0,2,2,0,0,1],[1,1,1,1,1,1,1,1,1,1,1,[1,{"x":11,"y":32},{"x":11,"y":37}],1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,2,0,0,0,1],[0,0,0,0,1,0,0,0,1,0,0,0,1],[1,1,1,1,1,1,1,1,1,1,1,1,1]]); 
    timer = getLongestTimer();
  } else if (level === 21) {
    buildLevel([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,[1,{"x":25,"y":9},{"x":33,"y":9}],0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0]]);
    timer = getLongTimer();
  } else if (level === 22) {
    buildLevel([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,2,2,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,[1,{"x":31,"y":6},{"x":31,"y":2}],1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,1,[1,{"x":10,"y":7},{"x":10,"y":2}],1,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0],[9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0],[9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,5,0,0,0,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],[9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,0,0,0,0,0,0,0,0,0,0,1,1,1,1,[1,{"x":55,"y":17},{"x":55,"y":26}],0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],[9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,6,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],[9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1]])
    timer = getLongestTimer();
  } else if (level === 23) {
    buildLevel([[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,[1,{"x":40,"y":0},{"x":40,"y":40}],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,2,0,2,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,9,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,9,0,0,9,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,{"x":39,"y":16},{"x":31,"y":16},{"x":31,"y":14}],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,[1,{"x":5,"y":18},{"x":13,"y":18}],[1,{"x":6,"y":18},{"x":14,"y":18}],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,{"x":17,"y":19},{"x":17,"y":11}],0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,6,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,6,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,1,0,0,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,1,0,0,1,0,0,5,0,0,1,0,0,1,0,0,0,5,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,4],[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1],[0,0,0,0,0,2,2,0,0,2,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,[1,{"x":2,"y":40},{"x":2,"y":10}],1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]);
    timer = getLongTimer();
  } else if (level === 24) {
    buildLevel([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,4,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,5,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,[1,{"x":9,"y":13},{"x":9,"y":7}],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,[1,{"x":18,"y":14},{"x":15,"y":7}],0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,[1,{"x":10,"y":28},{"x":10,"y":24}],1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,3,1,0,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,5,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,9,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,[1,{"x":29,"y":35},{"x":29,"y":25}],0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]);
    timer = getLongestTimer();
  } else {
    youWin = true;
    result = (millis() - start) / 1000;
  }
}

function formatTime(time) {
  const min = floor(time / 60);
  const sec = time - min * 60;
  return min === 0 ? sec.toFixed(2) : min + ":" + sec.toFixed(2);
}

let currentImage = 0;
let currentSound = 0;
function loadImages() {
  if (currentImage < toLoad.length) {
    const imageName = toLoad[currentImage];
    loadImage(`./assets/${imageName}.png`, img => {
      images[imageName] = img;
      currentImage++;
      console.log(`${currentImage} images loaded!`);
      loadImages(); //RECURSION!!!!!!

      //setTimeout(loadImages, 250);
    });
  } else if (!pxfont) {
    loadMenu();
    loadFont("./assets/upheavtt.ttf", font => {
      pxfont = font;
      loadImages();
    })
  } else if (!music) {
    loadSound("./assets/music.wav", m => {
      music = m;
      loadImages();
    })
  } else if (currentSound < toLoadSounds.length) {
    const soundName = toLoadSounds[currentSound];
    console.log(soundName);
    loadSound(`./assets/${soundName}.wav`, s => {
      sounds[soundName] = s;
      currentSound++;
      console.log(`${currentSound} sounds loaded!`);
      loadImages(); //RECURSION!!!!!!

      //setTimeout(loadImages, 250);
    });
  } else {
    music.loop();
    menu = true;
  }
}

function keyPressed() {
  const k = key.toLowerCase();
  if (youWin) {
    youWin = false;
    currentLevel = 0;
    deaths = 0;
    loadLevel(0);
  } else {
    if (k === " " || keyCode === UP_ARROW || k === "w" || key == "W") {
      player.jump();
    }
  }
}

// THERE
// EASY
// JUST HAVE SEPARATE FUNCTIONS
// UPDATE GETS CALLED 60 TIMES A SECOND
// DRAW GETS CALLED EVERY TIME THE SCREEN REFRESHES
// EASY
function update() {
  if (mouseIsPressed) {
    for (let i = 0; i < 5; i++) {
      bubbles.push(new Bubble(mouseX, mouseY));
    }
  }
  for (let i = bubbles.length - 1; i >= 0; i--) {
    const bubble = bubbles[i];
    bubble.update();
    if (bubble.life < 0) {
      bubbles.splice(i, 1);
    }
  }
  if (!menu && !youWin && currentSound >= toLoadSounds.length) {
    if (!paused) {
      for (const platform of platforms) {
        platform.update();
      }
      for (const enemy of enemies) {
        enemy.update();
      }
      if (keyIsDown(RIGHT_ARROW) || keyIsDown(68)) {
        player.move(1);
        player.left = false;
      }
      if (keyIsDown(LEFT_ARROW) || keyIsDown(65)) {
        player.move(-1);
        player.left = true;
      }
      player.update();
      for (const platform of platforms) {
        player.boosh(platform);
      }
      for (const spike of spikes) {
        player.boosh(spike);
      }
      for (const enemy of enemies) {
        player.boosh(enemy);
      }
      for (const friend of friends) {
        player.boosh(friend);
      }
      player.boosh(key_);
      player.boosh(door);
      if (player.pos.y > height + player.r) {
        loadLevel(currentLevel);
        deaths++;
        playSound("death");
        loseLife();
      }
      for (let i = particles.length - 1; i >= 0; i--) {
        const particle = particles[i];
        particle.update();
        for (const platform of platforms) {
          particle.boosh(platform);
        }
        if (particle.life < 0) {
          particles.splice(i, 1);
        }
      }
      let num = timer - (millis() - now) / 1000;
      if (num < 0) {
        loadLevel(currentLevel);
        deaths++;
        playSound("death");
        loseLife();
      }
      camX = lerp(camX, max(player.pos.x, width / 2), 0.07);
      camY = lerp(camY, min(player.pos.y, height / 2), 0.07);
    }
  }
}

function draw() {
  background(24);
  push();
  if (currentSound < toLoadSounds.length || !pxfont) {
    textAlign(CENTER, CENTER);
    noStroke();
    fill(255);
    textSize(height / 25);
    text(`Loading...`, width / 2, 8 * height / 20);
    textSize(height / 70);
    text(`${currentImage} of ${toLoad.length} assets loaded!`, width / 2, 9 * height / 20);
    noStroke();
    fill(74);
    rect(width / 4, 19 * height / 40, width / 2, height / 20);
    fill(200);
    rect(width / 4, 19 * height / 40, map(currentImage, 0, toLoad.length, 0, width / 2), height / 20);
  } else if (youWin) {
    textFont(pxfont);
    textAlign(CENTER, CENTER);
    noStroke();
    fill(255);
    textSize(height / 25);
    text(`You win!
Speedrun: ${formatTime(result)}
Average time spent on level: ${formatTime(result / levels)}
Deaths: ${formatTime(deaths)}`, width / 2, height / 2);
    textSize(height / 70);
    text(`Press any key to play again`, width / 2, 6 * height / 10);
  } else if (menu) {
    imageMode(CENTER);
    image(images.background, width/2, height/2, width*3, height*3);
    if (levelselect) {
      textFont(pxfont);
      textAlign(CENTER, CENTER);
      textSize(96);
      noStroke();
      fill(255);
      text("Level select", width/2, height/8);
    } else if (settings) {
      textFont(pxfont);
      textAlign(RIGHT, CENTER);
      textSize(36);
      noStroke();
      fill(255);
      text("Mode", btns[0].pos.x - btns[0].w*0.7, btns[0].pos.y);
    } else {
      textFont(pxfont);
      textAlign(CENTER, CENTER);
      textSize(96);
      noStroke();
      fill(255);
      text("Key Quest", width/2, height/6);
    }
    for (const btn of btns) {
      btn.render();
    } 
    for (const slider of sliders) {
      slider.render();
    } 
  }else {
    textFont(pxfont);
    let m = millis();
    let speedrun = (m - start) / 1000;
    let num = paused ? pausedTime : timer - (m - now) / 1000;
    push();
    translate(width / 4 - camX / 2, height / 4 - camY / 2);
    image(images.background, -50, -2*height, width*3, height*3);
    translate(width / 4 - camX / 2, height / 4 - camY / 2);
    for (const platform of platforms) {
      platform.render();
    }
    for (const spike of spikes) {
      spike.render();
    }
    for (const enemy of enemies) {
      enemy.render();
    }
    for (const friend of friends) {
      friend.render();
    }
    key_.render();
    door.render();
    for (const particle of particles) {
      particle.render();
    }
    player.render();
    pop();
    if (mode === "speedrun" || timer < Infinity) {
      textAlign(CENTER, CENTER);
      textSize(36);
      noStroke();
      fill(255);
      let col, percent = mode === "speedrun" ? currentLevel / levels : num / timer;
      if (percent > 0.65) {
        col = color(map(percent, 0.65, 1, 255, 0), 255, 0);
      } else if (percent > 0.1) {
        col = color(255, map(percent, 0.1, 0.65, 0, 255), 0);
      } else {
        col = color(map(percent, 0, 0.1, 198, 255), 0, 0);
      }
      text(mode === "speedrun" ? currentLevel : formatTime(num), width / 2, 72);
      fill(col);
      rect(0, 0, percent * width, 12);
    }
    imageMode(CORNER);
    image(images.wooden_plate, 0, 12, 300, 150);
    textAlign(LEFT, CENTER);
    textSize(28);
    fill(255);
    text(`Level: ${currentLevel+1}
Mode: ${mode}${mode === "speedrun" ? `
Speedrun: ${formatTime(speedrun)}
Deaths: ${deaths}` : ""}`, 18, 84);
    if (mode === "hard") {
      let x = width - 144;
      for (let i = 0; i < 5; i++) {
        image(i < lives ? images.heart : images.emptyheart, x, 54, 54, 54);
        x -= 72;
      }
    }
    if (paused) {
      background(0, 128);
    }
    const img = mode === "speedrun" ? images.x : (paused ? images.resumebtn : images.pausebtn);
    imageMode(CENTER);
    image(img, width-54, 54, 72, 72);
    if (paused) {
      image(images.home, width-144, 54, 72, 72);
    }
  }
  pop();
  
  noStroke();
  fill(255);
  circle(mouseX, mouseY, 12);
  for (const bubble of bubbles) {
    bubble.render();
  }
}

class Player {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.vel = createVector();
    this.speed = 6;
    this.r = 36;
    this.jumpable = false;
    this.hasKey = false;
    this.onPlatform = false;
    this.onFriend = false;
    this.wasOnFriend = false;
    this.health = 3;
    this.frames = 0;
    this.left = false;
    this.jumpy = 0;
    this.jumpyVel = 0;
    this.coyote = 0;
    this.history = [];
  }

  move(dir) {
    this.pos.x += dir * this.speed;
  }

  jump() {
    if (this.coyote > 0) {
      this.vel.y = -10;
      this.coyote = 0;
      this.jumpyVel = 1;
      playSound("jump");
      for (let i = 0; i < 50; i++) {
        particles.push(new Particle(player.pos.x, player.pos.y));
      }
    }
  }

  intersects(platform) {
    return !(this.pos.x + this.r <= platform.pos.x - platform.w / 2 ||
      this.pos.x - this.r >= platform.pos.x + platform.w / 2 ||
      this.pos.y + this.r <= platform.pos.y - platform.h / 2 ||
      this.pos.y - this.r >= platform.pos.y + platform.h / 2);
  }

  boosh(platform) {
    if (this.intersects(platform)) {
      if (platform.type === "platform") {
        const xPercent = map(this.pos.x, platform.pos.x - platform.w / 2, platform.pos.x + platform.w / 2, -1, 1);
        const yPercent = map(this.pos.y, platform.pos.y - platform.h / 2, platform.pos.y + platform.h / 2, -1, 1);
        if (abs(xPercent) > abs(yPercent)) {
          if (this.pos.x < platform.pos.x) {
            this.pos.x = platform.pos.x - platform.r * 2;
          } else {
            this.pos.x = platform.pos.x + platform.r * 2;
          }
        } else {
          if (this.pos.y < platform.pos.y) {
            this.pos.y = platform.pos.y - platform.r * 2;
            this.vel.y = min(0, this.vel.y);
            this.vel.x = platform.vel.x;
            this.onPlatform = true;
            this.coyote = 10;
          } else {
            this.pos.y = platform.pos.y + platform.r * 2;
            this.vel.y = max(this.vel.y, -this.vel.y);
          }
        }
      } else if (platform.type === "spike") {
        loadLevel(currentLevel);
        deaths++;
        playSound("death");
        loseLife();
      } else if (platform.type === "key") {
        if (!this.hasKey) {
          this.hasKey = true;
          platform.gottem = true;
          playSound("key");
        }
      } else if (platform.type === "door") {
        if (this.hasKey) {
          const highestUnlocked = mode === "easy" ? highestUnlockedEasy : (mode === "medium" ? highestUnlockedMedium : highestUnlockedHard);
          console.log(highestUnlocked);
          if (currentLevel === highestUnlocked) {
            if (mode === "easy") {
              highestUnlockedEasy++;
              storage.setItem("highestUnlockedEasy", highestUnlockedEasy);
            } else if (mode === "medium") {
              highestUnlockedEasy++;
              highestUnlockedMedium++;
              storage.setItem("highestUnlockedEasy", highestUnlockedEasy);
              storage.setItem("highestUnlockedMedium", highestUnlockedMedium);
            } else if (mode === "hard") {
              highestUnlockedEasy++;
              highestUnlockedMedium++;
              highestUnlockedHard++;
              storage.setItem("highestUnlockedEasy", highestUnlockedEasy);
              storage.setItem("highestUnlockedMedium", highestUnlockedMedium);
              storage.setItem("highestUnlockedHard", highestUnlockedHard);
            }
          }
          currentLevel++;
          loadLevel(currentLevel);
          playSound("lvlcomplete");
        }
      } else if (platform.type === "enemy") {
        this.health -= platform.health;
        if (this.health <= 0) {
          loadLevel(currentLevel);
        } else {
          enemies.splice(enemies.indexOf(platform), 1);
        }
        deaths++;
        playSound("death");
        loseLife();
      }
      if (platform.type === "friend") {
        this.vel.y = -15;
        this.onFriend = true;
        if (!this.wasOnFriend) {
          playSound("BOING");
          for (let i = 0; i < 50; i++) {
            particles.push(new Particle(player.pos.x, player.pos.y));
          }
        }
      } else {
        this.onFriend = false;
      }
    }
  }

  update() {
    this.vel.add(0, 0.3);
    this.pos.add(this.vel);
    this.history.push(this.pos.copy());
    if (this.history.length > 20) {
      this.history.shift();
    }
    if (this.onPlatform) {
      this.onPlatform = false;
    } else {
      this.vel.x = 0;
    }
    this.wasOnFriend = this.onFriend;
    if (this.onFriend) {
      this.onFriend = false;
    }
    if (frameCount % 10 === 0) {
      this.frames++;
    }
    this.jumpy += this.jumpyVel;
    if (this.jumpy > 10) {
      this.jumpyVel = -1;
    } else if (this.jumpy < 0) {
      this.jumpyVel = 0;
    }
    this.coyote = max(this.coyote-1, 0);
  }

  render() {
    let imgName = keyIsDown(LEFT_ARROW) !== keyIsDown(RIGHT_ARROW) && this.onPlatform ? "walk" : "idle";
    imgName += "player";
    imgName += this.hasKey ? "key" : "";
    imgName += (keyIsDown(LEFT_ARROW) !== keyIsDown(RIGHT_ARROW) && this.onPlatform ? this.frames % 4 : this.frames % 2) + 1;
    if (images[imgName]) {
      for (let i = 1; i < this.history.length; i++) {
        const pos = this.history[i];
        const prevPos = this.history[i-1];
        const r = map(i, 0, this.history.length, 0, 24);
        //const alpha = map(i, 0, this.history.length, 0, 255);
        stroke(0, 0, 153); //, alpha);
        strokeWeight(r);
        line(prevPos.x, prevPos.y, pos.x, pos.y);
      }
      push();
      translate(this.pos.x, this.pos.y);
      scale(this.left ? -1 + this.jumpy/72 : 1 - this.jumpy/72, 1 + this.jumpy/72);
      noStroke();
      imageMode(CENTER);
      image(images[imgName], 0, 0, this.r * 2, this.r * 2);
      pop();
      // stroke(0, 0, 255);
      // fill(0, 0, 255, 51);
      // rectMode(CENTER);
      // rect(this.pos.x, this.pos.y, this.r*2, this.r*2);
    }
  }
}

class Platform {
  constructor(x, y, i, j, waypoints = null) {
    this.pos = createVector(x, y);
    this.i = i;
    this.j = j;
    this.r = 36;
    this.w = this.r * 2;
    this.h = this.r * 2;
    this.img = `grass${floor(random(1, 11))}`;
    this.type = "platform";
    this.waypoints = waypoints;
    this.currentWaypoint = 0;
  }

  get vel() {
    if (this.waypoints) {
      return p5.Vector.sub(this.waypoints[this.currentWaypoint], this.pos).limit(3);
    }
    return createVector();
  }

  update() {
    let hack = 0.001;
    if (this.waypoints) {
      const waypoint = this.waypoints[this.currentWaypoint];
      const disp = p5.Vector.sub(waypoint, this.pos);
      if (disp.mag() < 3 + hack) { // hacky but does the job
        this.pos.set(waypoint);
        this.currentWaypoint = (this.currentWaypoint + 1) % this.waypoints.length;
      } else {
        disp.setMag(3);
        this.pos.add(disp);
      }
    }
  }

  render() {
    if (images[this.img]) {
      noStroke();
      imageMode(CENTER);
      image(images[this.img], this.pos.x, this.pos.y, this.w, this.h);
      // stroke(0, 0, 255);
      // fill(0, 0, 255, 51);
      // rectMode(CENTER);
      // rect(this.pos.x, this.pos.y, this.w, this.h);
    }
  }
}

class Spike {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.r = 36;
    this.w = this.r * 2;
    this.h = this.r;
    this.type = "spike";
  }

  render() {
    if (images.spiky) {
      noStroke();
      imageMode(CENTER);
      image(images.spiky, this.pos.x, this.pos.y, this.w, this.h);
      // stroke(0, 0, 255);
      // fill(0, 0, 255, 51);
      // rectMode(CENTER);
      // rect(this.pos.x, this.pos.y, this.w, this.h);
    }
  }
}

class Key {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.r = 36;
    this.w = this.r * 12 / 5;
    this.h = this.r;
    this.type = "key";
    this.gottem = false;
  }

  render() {
    if (!this.gottem && images.key) {
      noStroke();
      imageMode(CENTER);
      image(images.key, this.pos.x, this.pos.y, this.w, this.h);
      // stroke(0, 0, 255);
      // fill(0, 0, 255, 51);
      // rectMode(CENTER);
      // rect(this.pos.x, this.pos.y, this.w, this.h);
    }
  }
}

class Door {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.r = 36;
    this.w = this.r * 2;
    this.h = this.r * 2;
    this.type = "door";
  }

  render() {
    if (images.door) {
      noStroke();
      imageMode(CENTER);
      image(images.door, this.pos.x, this.pos.y, this.w, this.h);
      // stroke(0, 0, 255);
      // fill(0, 0, 255, 51);
      // rectMode(CENTER);
      // rect(this.pos.x, this.pos.y, this.w, this.h);
    }
  }
}

class Enemy {
  constructor(x, y, direction, isWeak) {
    this.pos = createVector(x, y);
    this.r = 36;
    this.w = this.r * 2;
    this.h = this.r * 2;
    this.type = "enemy";
    this.vel = createVector(direction ? 0 : 2, direction ? 2 : 0);
    this.health = isWeak ? 1 : 3;
  }

  update() {
    for (const platform of platforms) {
      if (this.intersects(platform)) {
        this.vel.mult(-1);
        break;
      }
    }
    this.pos.add(this.vel);
  }

  intersects(platform) {
    return !(this.pos.x + this.r <= platform.pos.x - platform.w / 2 ||
      this.pos.x - this.r >= platform.pos.x + platform.w / 2 ||
      this.pos.y + this.r <= platform.pos.y - platform.h / 2 ||
      this.pos.y - this.r >= platform.pos.y + platform.h / 2);
  }

  render() {
    const img = this.health > 1 ? images.enemy : images.weakenemy;
    if (img) {
      noStroke();
      imageMode(CENTER);
      image(img, this.pos.x, this.pos.y, this.w, this.h);
      // stroke(0, 0, 255);
      // fill(0, 0, 255, 51);
      // rectMode(CENTER);
      // rect(this.pos.x, this.pos.y, this.w, this.h);
    }
  }
}

class Friend {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.r = 36;
    this.w = this.r * 2;
    this.h = this.r * 2;
    this.type = "friend";
  }

  render() {
    if (images.friend) {
      noStroke();
      imageMode(CENTER);
      image(images.friend, this.pos.x, this.pos.y, this.w, this.h);
      // stroke(0, 0, 255);
      // fill(0, 0, 255, 51);
      // rectMode(CENTER);
      // rect(this.pos.x, this.pos.y, this.w, this.h);
    }
  }
}

class Button {
  constructor(x, y, w, h, img, name, action=null) {
    this.pos = createVector(x, y);
    if (action === null) {
      this.name = "";
      this.action = name;
    } else {
      this.name = name;
      this.action = action;
    }
    this.w = w;
    this.h = h;
    this.img = img;
  }

  contains(x, y) {
    return x > this.pos.x - this.w / 2 &&
      x < this.pos.x + this.w / 2 &&
      y > this.pos.y - this.h / 2 &&
      y < this.pos.y + this.h / 2;
  }

  render() {
    if (this.img) {
      imageMode(CENTER);
      image(this.img, this.pos.x, this.pos.y, this.w, this.h);
      textFont(pxfont);
      textAlign(CENTER, CENTER);
      textSize(36);
      noStroke();
      fill(255);
      if (this.name[0] === "$") {
        image(images[this.name.slice(1)], this.pos.x, this.pos.y, this.w/2, this.h/2);
      } else {
        text(this.name, this.pos.x, this.pos.y);
      }
    }
  }
}

class Slider {
  constructor(x, y, min, max, start, step, name, action) {
    this.pos = createVector(x, y);
    this.w = 216;
    this.h = 3/8 * 216; // hack lol
    this.min = min;
    this.max = max;
    this.value = start;
    this.step = step;
    this.dragging = false;
    this.name = name;
    this.action = action;
  }

  click(x, y) {
    if (x > this.pos.x - this.w/2 &&
        x < this.pos.x + this.w/2 &&
        y > this.pos.y - this.h/2 &&
        y < this.pos.y + this.h/2) {
      this.dragging = true;
    }
  }

  slide(x, y) {
    if (this.dragging) {
      this.value = map(x, this.pos.x - this.w/2, this.pos.x + this.w/2, this.min, this.max, true);
      this.action(this.value);
    }
  }

  release() {
    this.dragging = false;
  }

  render() {
    if (images.bar && images.handle) {
      const x = map(this.value, this.min, this.max, this.pos.x - this.w/2, this.pos.x + this.w/2)
      imageMode(CENTER);
      image(images.bar, this.pos.x, this.pos.y, this.w, this.h);
      image(images.handle, x, this.pos.y, this.h*0.8, this.h*0.8);
      textFont(pxfont);
      textAlign(RIGHT, CENTER);
      textSize(36);
      noStroke();
      fill(255);
      text(this.name, this.pos.x - this.w*0.6, this.pos.y);
    }
  }
}

class Particle {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.vel = p5.Vector.random2D();
    this.vel.mult(random(4));
    this.r = 2;
    this.life = 255;
  }

  update() {
    this.vel.add(0, 0.1);
    this.vel.mult(0.99);
    this.pos.add(this.vel);
    this.life -= 2;
  }  

  intersects(platform) {
    return !(this.pos.x + this.r <= platform.pos.x - platform.w / 2 ||
      this.pos.x - this.r >= platform.pos.x + platform.w / 2 ||
      this.pos.y + this.r <= platform.pos.y - platform.h / 2 ||
      this.pos.y - this.r >= platform.pos.y + platform.h / 2);
  }

  boosh(platform) {
    if (this.intersects(platform)) {
      const xPercent = map(this.pos.x, platform.pos.x - platform.w / 2, platform.pos.x + platform.w / 2, -1, 1);
      const yPercent = map(this.pos.y, platform.pos.y - platform.h / 2, platform.pos.y + platform.h / 2, -1, 1);
      if (abs(xPercent) > abs(yPercent)) {
        if (this.pos.x < platform.pos.x) {
          this.pos.x = platform.pos.x - platform.r - this.r;
        } else {
          this.pos.x = platform.pos.x + platform.r + this.r;
        }
      } else {
        if (this.pos.y < platform.pos.y) {
          this.pos.y = platform.pos.y - platform.r - this.r;
          this.vel.y = min(0, this.vel.y);
          this.jumpable = true;
          this.vel.x = platform.vel.x;
          this.onPlatform = true;
        } else {
          this.pos.y = platform.pos.y + platform.r + this.r;
          this.vel.y = max(this.vel.y, -this.vel.y);
        }
      }
    }
  }

  render() {
    noStroke();
    fill(0, 0, 153, this.life);
    rectMode(CENTER);
    square(this.pos.x, this.pos.y, this.r*2);
  }
}

class Bubble {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.vel = p5.Vector.random2D();
    this.vel.mult(random(2));
    this.r = random(1, 4);
    this.life = 255;
  }

  update() {
    this.vel.add(0, -0.1);
    this.vel.mult(0.95);
    this.pos.add(this.vel);
    this.life -= 2;
  }

  render() {
    noStroke();
    fill(153, 153, 255, this.life);
    circle(this.pos.x, this.pos.y, this.r*2);
  }
}